// Copyright 2019 PingCAP, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go generate in expression/generator; DO NOT EDIT.

package expression

import (
	"fmt"
	"math/rand"
	"testing"

	. "github.com/pingcap/check"
	"github.com/pingcap/tidb/parser/ast"
	"github.com/pingcap/tidb/types"
)

type inGener struct {
	defaultGener
}

func (g inGener) gen() interface{} {
	if rand.Float64() < g.nullRation {
		return nil
	}
	randNum := rand.Int63n(10)
	switch g.eType {
	case types.ETInt:
		if rand.Float64() < 0.5 {
			return -randNum
		}
		return randNum
	case types.ETReal:
		if rand.Float64() < 0.5 {
			return -float64(randNum)
		}
		return float64(randNum)
	case types.ETString:
		return fmt.Sprint(randNum)
	}
	return randNum
}

var vecBuiltinOtherGeneratedCases = map[string][]vecExprBenchCase{
	ast.In: {
		// builtinInIntSig
		{
			retEvalType: types.ETInt,
			childrenTypes: []types.EvalType{
				types.ETInt,
				types.ETInt,
				types.ETInt,
				types.ETInt,
			},
			geners: []dataGenerator{
				inGener{defaultGener{eType: types.ETInt, nullRation: 0.2}},
				inGener{defaultGener{eType: types.ETInt, nullRation: 0.2}},
				inGener{defaultGener{eType: types.ETInt, nullRation: 0.2}},
				inGener{defaultGener{eType: types.ETInt, nullRation: 0.2}},
			},
		},
		// builtinInStringSig
		{
			retEvalType: types.ETInt,
			childrenTypes: []types.EvalType{
				types.ETString,
				types.ETString,
				types.ETString,
				types.ETString,
			},
			geners: []dataGenerator{
				inGener{defaultGener{eType: types.ETString, nullRation: 0.2}},
				inGener{defaultGener{eType: types.ETString, nullRation: 0.2}},
				inGener{defaultGener{eType: types.ETString, nullRation: 0.2}},
				inGener{defaultGener{eType: types.ETString, nullRation: 0.2}},
			},
		},
		// builtinInRealSig
		{
			retEvalType: types.ETInt,
			childrenTypes: []types.EvalType{
				types.ETReal,
				types.ETReal,
				types.ETReal,
				types.ETReal,
			},
			geners: []dataGenerator{
				inGener{defaultGener{eType: types.ETReal, nullRation: 0.2}},
				inGener{defaultGener{eType: types.ETReal, nullRation: 0.2}},
				inGener{defaultGener{eType: types.ETReal, nullRation: 0.2}},
				inGener{defaultGener{eType: types.ETReal, nullRation: 0.2}},
			},
		},
	},
}

func (s *testEvaluatorSuite) TestVectorizedBuiltinOtherEvalOneVecGenerated(c *C) {
	testVectorizedEvalOneVec(c, vecBuiltinOtherGeneratedCases)
}

func (s *testEvaluatorSuite) TestVectorizedBuiltinOtherFuncGenerated(c *C) {
	testVectorizedBuiltinFunc(c, vecBuiltinOtherGeneratedCases)
}

func BenchmarkVectorizedBuiltinOtherEvalOneVecGenerated(b *testing.B) {
	benchmarkVectorizedEvalOneVec(b, vecBuiltinOtherGeneratedCases)
}

func BenchmarkVectorizedBuiltinOtherFuncGenerated(b *testing.B) {
	benchmarkVectorizedBuiltinFunc(b, vecBuiltinOtherGeneratedCases)
}
