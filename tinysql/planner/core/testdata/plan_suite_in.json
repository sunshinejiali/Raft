[
  {
    "name": "TestIndexHint",
    "cases": [
      // simple case
      "select /*+ USE_INDEX(t, c_d_e) */ * from t",
      "select /*+ USE_INDEX(test.t, c_d_e) */ * from t",
      "select /*+ IGNORE_INDEX(t, c_d_e) */ c from t order by c",
      "select /*+ IGNORE_INDEX(test.t, c_d_e) */ c from t order by c",
      "select /*+ USE_INDEX(t, c_d_e) */ * from t t1",
      "select /*+ IGNORE_INDEX(t, c_d_e) */ t1.c from t t1 order by t1.c",
      "select /*+ USE_INDEX(t1, c_d_e) */ * from t t1",
      "select /*+ IGNORE_INDEX(t1, c_d_e) */ t1.c from t t1 order by t1.c",
      "select /*+ USE_INDEX(t1, c_d_e), USE_INDEX(t2, f) */ * from t t1, t t2 where t1.a = t2.b",
      "select /*+ IGNORE_INDEX(t1, c_d_e), IGNORE_INDEX(t2, f), HASH_JOIN(t1) */ * from t t1, t t2 where t1.a = t2.b",
      // test multiple indexes
      "select /*+ USE_INDEX(t, c_d_e, f, g) */ * from t order by f",
      // use TablePath when the hint only contains table.
      "select /*+ USE_INDEX(t) */ f from t where f > 10",
      // there will be a warning instead of error when index not exist
      "select /*+ USE_INDEX(t, no_such_index) */ * from t",
      "select /*+ IGNORE_INDEX(t, no_such_index) */ * from t",
      // use both use_index and ignore_index, same as index hints in sql.
      "select /*+ USE_INDEX(t, c_d_e), IGNORE_INDEX(t, f) */ c from t order by c",
      "select /*+ USE_INDEX(t, f), IGNORE_INDEX(t, f) */ c from t order by c",
      "select /*+ USE_INDEX(t, c_d_e), IGNORE_INDEX(t, c_d_e) */ c from t order by c",
      "select /*+ USE_INDEX(t, c_d_e, f), IGNORE_INDEX(t, c_d_e) */ c from t order by c"
    ]
  },
  {
    "name": "TestDAGPlanBuilderSimpleCase",
    "cases":[
      // Test index hint.
      "select * from t t1 use index(c_d_e)",
      "select f from t use index() where f = 1",
      // Test ts + Sort vs. DoubleRead + filter.
      "select a from t where a between 1 and 2 order by c",
      // Test DNF condition + Double Read.
      "select * from t where (t.c > 0 and t.c < 2) or (t.c > 4 and t.c < 6) or (t.c > 8 and t.c < 10) or (t.c > 12 and t.c < 14) or (t.c > 16 and t.c < 18)",
      "select * from t where (t.c > 0 and t.c < 1) or (t.c > 2 and t.c < 3) or (t.c > 4 and t.c < 5) or (t.c > 6 and t.c < 7) or (t.c > 9 and t.c < 10)",
      // Test TopN to table branch in double read.
      "select * from t where t.c = 1 and t.e = 1 order by t.b limit 1",
      // Test Null Range
      "select * from t where t.e_str is null",
      // Test Null Range but the column has not null flag.
      "select * from t where t.c is null",
      // Test TopN to index branch in double read.
      "select * from t where t.c = 1 and t.e = 1 order by t.e limit 1",
      // Test TopN to Limit in double read.
      "select * from t where t.c = 1 and t.e = 1 order by t.d limit 1",
      // Test TopN to Limit in index single read.
      "select c from t where t.c = 1 and t.e = 1 order by t.d limit 1",
      // Test TopN to Limit in table single read.
      "select c from t order by t.a limit 1",
      // Test TopN push down in table single read.
      "select c from t order by t.a + t.b limit 1",
      // Test Limit push down in table single read.
      "select c from t  limit 1",
      // Test Limit push down in index single read.
      "select c from t where c = 1 limit 1",
      // Test index single read and Selection.
      "select c from t where c = 1",
      // Test index single read and Sort.
      "select c from t order by c",
      // Test index single read and Sort.
      "select c from t where c = 1 order by e",
      // Test Limit push down in double single read.
      "select c, b from t where c = 1 limit 1",
      // Test Selection + Limit push down in double single read.
      "select c, b from t where c = 1 and e = 1 and b = 1 limit 1",
      // Test Order by multi columns.
      "select c from t where c = 1 order by d, c",
      // Test for index with length.
      "select c_str from t where e_str = '1' order by d_str, c_str",
      // Test PK in index single read.
      "select c from t where t.c = 1 and t.a > 1 order by t.d limit 1",
      // Test composed index.
      // FIXME: The TopN didn't be pushed.
      "select c from t where t.c = 1 and t.d = 1 order by t.a limit 1",
      // Test PK in index double read.
      "select * from t where t.c = 1 and t.a > 1 order by t.d limit 1",
      // Test index filter condition push down.
      "select * from t use index(e_d_c_str_prefix) where t.c_str = 'abcdefghijk' and t.d_str = 'd' and t.e_str = 'e'",
      "select * from (select * from t use index() order by b) t left join t t1 on t.a=t1.a limit 10",
      "select * from (select *, NULL as xxx from t) t order by xxx",
      "select * from t use index(f) where f = 1 and a = 1",
      "select * from t2 use index(b) where b = 1 and a = 1"
    ]
  },
  {
    "name": "TestDAGPlanBuilderJoin",
    "cases": [
      "select * from t t1 join t t2 on t1.a = t2.c_str",
      "select * from t t1 join t t2 on t1.b = t2.a",
      "select * from t t1 join t t2 on t1.a = t2.a join t t3 on t1.a = t3.a",
      "select * from t t1 join t t2 on t1.a = t2.a join t t3 on t1.b = t3.a",
      "select * from t t1 join t t2 on t1.b = t2.a order by t1.a",
      "select * from t t1 join t t2 on t1.b = t2.a order by t1.a limit 1",
      // Test hash join's hint.
      "select /*+ TIDB_HJ(t1, t2) */ * from t t1 join t t2 on t1.b = t2.a order by t1.a limit 1",
      "select * from t t1 left join t t2 on t1.b = t2.a where 1 = 1 limit 1",
      "select * from t t1 join t t2 on t1.b = t2.a and t1.c = 1 and t1.d = 1 and t1.e = 1 order by t1.a limit 1",
      "select * from t t1 join t t2 on t1.b = t2.b join t t3 on t1.b = t3.b",
      "select * from t t1 join t t2 on t1.a = t2.a order by t1.a",
      "select * from t t1 left outer join t t2 on t1.a = t2.a right outer join t t3 on t1.a = t3.a",
      "select * from t t1 join t t2 on t1.a = t2.a join t t3 on t1.a = t3.a and t1.b = 1 and t3.c = 1",
      // Test Single Merge Join.
      // Merge Join now enforce a sort.
      "select /*+ TIDB_SMJ(t1,t2)*/ * from t t1, t t2 where t1.a = t2.b",
      "select /*+ TIDB_SMJ(t1,t2)*/ * from t t1, t t2 where t1.a = t2.a",
      // Test Single Merge Join + Sort.
      "select /*+ TIDB_SMJ(t1,t2)*/ * from t t1, t t2 where t1.a = t2.a order by t2.a",
      "select /*+ TIDB_SMJ(t1,t2)*/ * from t t1, t t2 where t1.b = t2.b order by t2.a",
      // Test Single Merge Join + Sort + desc.
      "select /*+ TIDB_SMJ(t1,t2)*/ * from t t1, t t2 where t1.a = t2.a order by t2.a desc",
      "select /*+ TIDB_SMJ(t1,t2)*/ * from t t1, t t2 where t1.b = t2.b order by t2.b desc",
      // Test Multi Merge Join.
      "select /*+ TIDB_SMJ(t1,t2,t3)*/ * from t t1, t t2, t t3 where t1.a = t2.a and t2.a = t3.a",
      "select /*+ TIDB_SMJ(t1,t2,t3)*/ * from t t1, t t2, t t3 where t1.a = t2.b and t2.a = t3.b",
      // Test Multi Merge Join with multi keys.
      // TODO: More tests should be added.
      "select /*+ TIDB_SMJ(t1,t2,t3)*/ * from t t1, t t2, t t3 where t1.c = t2.c and t1.d = t2.d and t3.c = t1.c and t3.d = t1.d",
      "select /*+ TIDB_SMJ(t1,t2,t3)*/ * from t t1, t t2, t t3 where t1.c = t2.c and t1.d = t2.d and t3.c = t1.c and t3.d = t1.d order by t1.c",
      // Test Multi Merge Join + Outer Join.
      "select /*+ TIDB_SMJ(t1,t2,t3)*/ * from t t1 left outer join t t2 on t1.a = t2.a left outer join t t3 on t2.a = t3.a",
      "select /*+ TIDB_SMJ(t1,t2,t3)*/ * from t t1 left outer join t t2 on t1.a = t2.a left outer join t t3 on t1.a = t3.a"
    ]
  },
  {
    "name": "TestDAGPlanTopN",
    "cases": [
      "select * from t t1 left join t t2 on t1.b = t2.b left join t t3 on t2.b = t3.b order by t1.a limit 1",
      "select * from t t1 left join t t2 on t1.b = t2.b left join t t3 on t2.b = t3.b order by t1.b limit 1",
      "select * from t t1 left join t t2 on t1.b = t2.b left join t t3 on t2.b = t3.b limit 1",
      "select * from t where b = 1 and c = 1 order by c limit 1",
      "select * from t where c = 1 order by c limit 1",
      "select * from t order by a limit 1",
      "select c from t order by c limit 1"
    ]
  },
  {
    "name": "TestDAGPlanBuilderBasePhysicalPlan",
    "cases": [
      // Test complex delete.
      "delete from t where b < 1 order by d limit 1",
      // Test simple delete.
      "delete from t",
      // Test "USE INDEX" hint in delete statement from single table
      "delete from t use index(c_d_e) where b = 1",
      // Test complex insert.
      "insert into t select * from t where b < 1 order by d limit 1",
      // Test simple insert.
      "insert into t (a, b, c, e, f, g) values(0,0,0,0,0,0)",
      // Test dual.
      "select 1",
      "select * from t where false",
      // Test show.
      "show tables"
    ]
  },
  {
    "name": "TestDAGPlanBuilderUnionScan",
    "cases": [
      // Read table.
      "select * from t",
      "select * from t where b = 1",
      "select * from t where a = 1",
      "select * from t where a = 1 order by a",
      "select * from t where a = 1 order by b",
      "select * from t where a = 1 limit 1",
      "select * from t where c = 1",
      "select c from t where c = 1"
    ]
  },
  {
    "name": "TestDAGPlanBuilderAgg",
    "cases": [
      // Test agg + table.
      "select sum(a), avg(b + c) from t group by d",
      //  Test group by (c + d)
      "select sum(e), avg(e + c) from t where c = 1 group by (c + d)",
      // Test stream agg + index single.
      "select sum(e), avg(e + c) from t where c = 1 group by c",
      // Test hash agg + index single.
      "select sum(e), avg(e + c) from t where c = 1 group by e",
      // Test hash agg + index double.
      "select sum(e), avg(b + c) from t where c = 1 and e = 1 group by d",
      // Test stream agg + index double.
      "select sum(e), avg(b + c) from t where c = 1 and b = 1",
      // Test hash agg + order.
      "select sum(e) as k, avg(b + c) from t where c = 1 and b = 1 and e = 1 group by d order by k",
      // Test stream agg + order.
      "select sum(e) as k, avg(b + c) from t where c = 1 and b = 1 and e = 1 group by c order by k",
      // Test stream agg with multi group by columns.
      "select sum(e+1) from t group by e,d,c order by c",
      "select sum(e+1) from t group by e,d,c order by c,e",
      // Test stream agg + limit or sort
      "select count(*) from t group by g order by g limit 10",
      "select count(*) from t group by g limit 10",
      "select count(*) from t group by g order by g",
      "select count(*) from t group by g order by g desc limit 1",
      // Test hash agg + limit or sort
      "select count(*) from t group by b order by b limit 10",
      "select count(*) from t group by b order by b",
      "select count(*) from t group by b limit 10",
      // Test merge join + stream agg
      "select sum(a.g), sum(b.g) from t a join t b on a.g = b.g group by a.g",
      // Test index join + stream agg
      "select /*+ tidb_inlj(a,b) */ sum(a.g), sum(b.g) from t a join t b on a.g = b.g and a.g > 60 group by a.g order by a.g limit 1",
      "select sum(a.g), sum(b.g) from t a join t b on a.g = b.g and a.a>5 group by a.g order by a.g limit 1",
      "select sum(d) from t"
    ]
  },
  {
    "name": "TestAggEliminator",
    "cases": [
      // Max to Limit + Sort-Desc.
      "select max(a) from t;",
      // Min to Limit + Sort.
      "select min(a) from t;",
      // Min to Limit + Sort, and isnull() should be added.
      "select min(c_str) from t;",
      // Do nothing to max + firstrow.
      "select max(a), b from t;",
      // If max/min contains scalar function, we can still do transformation.
      "select max(a+1) from t;",
      // Min + Max to Limit + Sort + Join.
      "select max(a), min(a) from t;",
      // Min + Max with range condition.
      "select max(a), min(a) from t where a > 10",
      // Min + Max with unified index range condition.
      "select max(d), min(d) from t where c = 1 and d > 10",
      // Min + Max with multiple columns
      "select max(a), max(c), min(f) from t",
      // Do nothing if any column has no index.
      "select max(a), max(b) from t",
      // Do nothing if any column has a non-range condition.
      "select max(a), max(c) from t where c > 10",
      // Do nothing if the condition cannot be pushed down to range.
      "select max(a), min(a) from t where a * 3 + 10 < 100",
      // Do nothing to max with groupby.
      "select max(a) from t group by b;",
      // If inner is not a data source, we can still do transformation.
      "select max(a) from (select t1.a from t t1 join t t2 on t1.a=t2.a) t"
    ]
  }
]
